import datetime
from collections import deque
from functools import reduce, lru_cache

from scipy.optimize import minimize, NonlinearConstraint, LinearConstraint, Bounds, basinhopping
from scipy.interpolate import interp1d, splev, splrep, BSpline, splprep, SmoothBivariateSpline
import math
import numpy as np
import matplotlib.pyplot as plt
import shapely.geometry as geom
import itertools
def circ_slice(a, start, length):
    #from StackOverflow
    it = itertools.cycle(a)
    next(itertools.islice(it, start, start), None)
    return list(itertools.islice(it, length))
coefficient_of_friction = 1.5
gravitational_acceleration = 9.8
max_accel = 15
min_vel = 15
max_vel = 100
track_width = 10
car_width = 1.6
car_length = 5.5
time_horizon = 5
plan_time_delta = time_horizon/10
verify_time_delta = time_horizon/25
min_point_horizon = time_horizon*10 #int(max(1, init_est_speed))
max_point_horizon = 200 #calc_max_point_horizon(init_x, init_y, init_dx_dt, init_dy_dt, init_d2x_dt, init_d2y_dt, init_position_index)
bezier_order = 5
num_cp = bezier_order+1

main_track_x = (67, 65, 64, 64, 63, 62, 61, 61, 60, 60, 60, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 61, 61, 62, 62, 63, 64, 64, 65, 66, 66, 67, 68, 69, 69, 70, 71, 72, 73, 74, 74, 75, 76, 77, 78, 79, 79, 80, 81, 82, 82, 83, 84, 84, 85, 86, 86, 87, 87, 88, 88, 88, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 90, 90, 90, 90, 90, 90, 90, 90, 90, 89, 89, 89, 89, 89, 89, 88, 88, 88, 88, 88, 88, 88, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 89, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 95, 96, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 108, 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 125, 127, 128, 130, 132, 133, 135, 137, 139, 141, 143, 144, 146, 148, 150, 152, 154, 156, 158, 160, 163, 165, 167, 169, 171, 173, 176, 178, 180, 182, 185, 187, 189, 192, 194, 196, 199, 201, 204, 206, 208, 211, 213, 216, 218, 221, 223, 226, 228, 231, 233, 236, 239, 241, 244, 246, 249, 251, 254, 257, 259, 262, 265, 267, 270, 272, 275, 278, 280, 283, 286, 288, 291, 293, 296, 299, 301, 304, 307, 309, 312, 314, 317, 320, 322, 325, 327, 330, 332, 335, 338, 340, 343, 345, 348, 350, 353, 355, 358, 360, 363, 365, 367, 370, 372, 375, 377, 379, 382, 384, 386, 389, 391, 393, 396, 398, 400, 402, 405, 407, 409, 411, 413, 415, 418, 420, 422, 424, 426, 428, 430, 432, 434, 436, 438, 439, 441, 443, 445, 447, 449, 450, 452, 454, 456, 457, 459, 460, 462, 464, 465, 467, 468, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 494, 495, 496, 497, 498, 498, 499, 500, 501, 501, 502, 503, 503, 504, 504, 505, 506, 506, 507, 507, 508, 508, 509, 509, 510, 510, 511, 511, 512, 512, 513, 513, 514, 514, 514, 515, 515, 516, 516, 517, 517, 518, 518, 518, 519, 519, 520, 520, 521, 521, 522, 522, 523, 523, 524, 524, 525, 526, 526, 527, 527, 528, 529, 529, 530, 531, 531, 532, 533, 534, 534, 535, 536, 537, 538, 539, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 559, 560, 561, 563, 564, 566, 567, 568, 570, 571, 573, 574, 576, 577, 579, 580, 582, 584, 585, 587, 588, 590, 592, 593, 595, 597, 598, 600, 602, 604, 605, 607, 609, 611, 612, 614, 616, 618, 619, 621, 623, 625, 627, 628, 630, 632, 634, 636, 638, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 658, 659, 661, 663, 665, 667, 668, 670, 672, 674, 676, 677, 679, 681, 683, 684, 686, 688, 689, 691, 693, 695, 696, 698, 699, 701, 703, 704, 706, 707, 709, 711, 712, 714, 715, 717, 718, 720, 721, 722, 724, 725, 727, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 746, 747, 748, 749, 750, 751, 752, 753, 753, 754, 755, 755, 756, 756, 757, 757, 758, 758, 758, 759, 759, 759, 759, 759, 759, 759, 759, 759, 759, 758, 758, 758, 757, 757, 756, 755, 755, 754, 753, 752, 751, 750, 748, 747, 746, 744, 743, 741, 740, 738, 736, 734, 733, 731, 729, 727, 725, 723, 721, 718, 716, 714, 712, 710, 707, 705, 703, 700, 698, 696, 693, 691, 689, 686, 684, 682, 679, 677, 675, 673, 670, 668, 666, 664, 662, 660, 657, 655, 653, 651, 649, 647, 645, 643, 641, 640, 638, 636, 634, 632, 630, 628, 627, 625, 623, 621, 620, 618, 616, 614, 613, 611, 609, 608, 606, 604, 603, 601, 599, 598, 596, 595, 593, 591, 590, 588, 587, 585, 583, 582, 580, 578, 577, 575, 574, 572, 570, 569, 567, 565, 564, 562, 560, 559, 557, 555, 554, 552, 550, 549, 547, 545, 544, 542, 540, 538, 537, 535, 533, 531, 530, 528, 526, 524, 523, 521, 519, 517, 515, 514, 512, 510, 508, 506, 504, 503, 501, 499, 497, 495, 493, 491, 490, 488, 486, 484, 482, 480, 478, 476, 474, 472, 470, 468, 466, 465, 463, 461, 459, 457, 455, 453, 451, 449, 447, 445, 443, 441, 439, 436, 434, 432, 430, 428, 426, 424, 422, 420, 418, 416, 414, 412, 409, 407, 405, 403, 401, 399, 397, 394, 392, 390, 388, 386, 384, 381, 379, 377, 375, 372, 370, 368, 366, 364, 361, 359, 357, 354, 352, 350, 348, 345, 343, 341, 338, 336, 334, 331, 329, 327, 325, 322, 320, 318, 315, 313, 311, 308, 306, 304, 302, 299, 297, 295, 293, 290, 288, 286, 284, 282, 280, 277, 275, 273, 271, 269, 267, 265, 263, 261, 259, 257, 255, 253, 251, 249, 247, 246, 244, 242, 240, 239, 237, 235, 234, 232, 231, 229, 228, 226, 225, 223, 222, 221, 219, 218, 217, 216, 214, 213, 212, 211, 210, 209, 208, 207, 207, 206, 205, 204, 204, 203, 202, 202, 201, 200, 200, 199, 199, 198, 198, 197, 197, 196, 196, 196, 195, 195, 195, 194, 194, 194, 193, 193, 193, 192, 192, 192, 192, 191, 191, 191, 190, 190, 190, 190, 189, 189, 189, 188, 188, 188, 187, 187, 186, 186, 186, 185, 185, 184, 184, 183, 183, 182, 181, 181, 180, 179, 179, 178, 177, 176, 175, 174, 173, 172, 171, 170, 169, 168, 167, 166, 164, 163, 162, 160, 159, 157, 156, 154, 152, 151, 149, 147, 145, 143, 141, 139, 137, 135, 133, 131, 128, 126, 124, 121, 119, 117, 115, 112, 110, 108, 105, 103, 101, 99, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 77, 75, 73, 72, 70, 69, 68, 66)
main_track_y = (343, 343, 342, 341, 340, 339, 338, 336, 335, 334, 332, 331, 330, 328, 326, 325, 323, 322, 320, 318, 316, 314, 312, 310, 309, 307, 304, 302, 300, 298, 296, 294, 291, 289, 287, 285, 282, 280, 278, 275, 273, 270, 268, 265, 263, 260, 258, 255, 253, 250, 248, 245, 243, 240, 237, 235, 232, 230, 227, 224, 222, 219, 217, 214, 212, 209, 206, 204, 201, 199, 196, 194, 191, 189, 186, 184, 181, 179, 176, 174, 171, 169, 167, 164, 162, 160, 157, 155, 153, 150, 148, 146, 144, 141, 139, 137, 135, 133, 131, 129, 126, 124, 122, 120, 118, 117, 115, 113, 111, 109, 107, 106, 104, 102, 100, 99, 97, 96, 94, 92, 91, 90, 88, 87, 85, 84, 83, 82, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 71, 70, 69, 69, 68, 67, 67, 66, 66, 65, 65, 64, 64, 63, 63, 63, 63, 62, 62, 62, 62, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 69, 69, 70, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 78, 79, 79, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 85, 85, 85, 85, 85, 85, 85, 85, 85, 84, 84, 84, 84, 84, 83, 83, 83, 83, 82, 82, 82, 82, 82, 81, 81, 81, 81, 80, 80, 80, 80, 79, 79, 79, 79, 79, 78, 78, 78, 78, 78, 78, 78, 78, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84, 84, 85, 86, 87, 88, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 104, 105, 107, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 158, 160, 162, 164, 166, 169, 171, 173, 175, 177, 180, 182, 184, 186, 189, 191, 193, 195, 198, 200, 202, 205, 207, 209, 211, 214, 216, 218, 220, 222, 225, 227, 229, 231, 233, 235, 238, 240, 242, 244, 246, 248, 250, 252, 254, 256, 258, 260, 262, 263, 265, 267, 269, 271, 272, 274, 276, 277, 279, 281, 282, 284, 285, 287, 288, 290, 291, 293, 294, 296, 297, 298, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 393, 394, 396, 397, 399, 400, 402, 403, 405, 407, 408, 410, 411, 413, 415, 417, 418, 420, 422, 424, 426, 427, 429, 431, 433, 435, 437, 439, 442, 444, 446, 448, 450, 452, 455, 457, 459, 461, 464, 466, 468, 471, 473, 475, 478, 480, 482, 484, 487, 489, 491, 493, 495, 497, 500, 502, 504, 506, 508, 510, 511, 513, 515, 517, 519, 520, 522, 523, 525, 526, 527, 529, 530, 531, 532, 533, 534, 535, 535, 536, 537, 537, 538, 538, 539, 539, 539, 539, 540, 540, 540, 540, 540, 540, 540, 540, 539, 539, 539, 538, 538, 538, 537, 537, 536, 535, 535, 534, 534, 533, 532, 531, 530, 530, 529, 528, 527, 526, 525, 524, 523, 522, 521, 520, 519, 518, 517, 515, 514, 513, 512, 511, 510, 509, 507, 506, 505, 504, 503, 502, 500, 499, 498, 497, 496, 495, 494, 492, 491, 490, 489, 488, 487, 486, 485, 484, 483, 482, 482, 481, 480, 479, 478, 478, 477, 476, 476, 475, 474, 474, 473, 473, 473, 472, 472, 472, 471, 471, 471, 471, 470, 470, 470, 470, 470, 470, 470, 470, 470, 470, 471, 471, 471, 471, 471, 472, 472, 472, 473, 473, 473, 474, 474, 475, 475, 476, 476, 477, 477, 478, 479, 479, 480, 480, 481, 482, 483, 483, 484, 485, 486, 486, 487, 488, 489, 490, 491, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 551, 552, 553, 554, 555, 555, 556, 557, 558, 558, 559, 560, 560, 561, 561, 562, 562, 563, 563, 564, 564, 564, 564, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 565, 564, 564, 564, 563, 563, 562, 562, 561, 560, 560, 559, 558, 557, 556, 555, 554, 553, 552, 550, 549, 547, 546, 544, 543, 541, 539, 538, 536, 534, 532, 530, 528, 526, 524, 522, 520, 518, 516, 514, 512, 510, 508, 506, 503, 501, 499, 497, 494, 492, 490, 488, 485, 483, 481, 478, 476, 474, 471, 469, 467, 464, 462, 460, 457, 455, 453, 450, 448, 446, 443, 441, 439, 436, 434, 432, 430, 427, 425, 423, 421, 419, 417, 414, 412, 410, 408, 406, 404, 402, 400, 398, 396, 394, 393, 391, 389, 387, 386, 384, 382, 381, 379, 377, 376, 374, 373, 372, 370, 369, 368, 367, 365, 364, 363, 362, 361, 360, 360, 359, 358, 357, 357, 356, 356, 355, 355, 354, 354, 354, 353, 353, 353, 353, 352, 352, 352, 352, 352, 351, 351, 351, 351, 351, 351, 351, 350, 350, 350, 350, 349, 349, 349, 348, 348, 347, 347, 346, 346, 345, 344, 344)

track_boundary1_x = (69.24036808,63.42342395,59.53001668,62.42342395,61.42342395,60.42342395,56.53001668,59.42342395,55.53001668,55.53001668,58.42342395,54.53001668,54.53001668,54.53001668,54.53001668,54.53001668,54.53001668,54.53001668,54.53001668,54.00000231,55.53001668,55.53001668,55.00000231,56.53001668,56.00000231,57.53001668,57.00000231,58.00000231,59.53001668,59.00000231,60.00000231,61.53001668,61.00000231,62.00000231,63.00000231,64.53001668,64.00000231,65.00000231,66.05093489,67.00000231,68.05093489,69.53001668,69.05093489,70.00000231,71.05093489,72.00000231,73.05093489,74.53001668,74.05093489,75.00000231,76.05093489,77.53001668,77.05093489,78.05093489,79.53001668,79.05093489,80.00000231,81.53001668,81.05093489,82.53001668,82.05093489,83.53001668,83.53001668,83.00000231,84.53001668,84.53001668,84.00000231,85.53001668,85.53001668,85.53001668,85.53001668,85.53001668,85.53001668,85.05093489,86.53001668,86.53001668,86.53001668,86.53001668,86.53001668,86.53001668,88.00384844,85.53001668,85.53001668,85.53001668,85.53001668,85.53001668,85.53001668,85.53001668,85.53001668,87.00384844,84.53001668,84.53001668,84.53001668,84.53001668,84.53001668,86.00384844,83.53001668,83.53001668,83.53001668,83.53001668,83.53001668,83.53001668,85.00384844,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.53001668,82.00000231,83.53001668,83.53001668,83.53001668,83.25506502,84.53001668,84.53001668,84.25506502,85.53001668,85.00000231,86.53001668,86.25506502,87.53001668,87.25506502,88.53001668,88.25506502,89.25506502,90.25506502,91.53001668,93.75963192,92.25506502,93.25506502,96.75963192,95.25506502,96.25506502,99.75963192,98.25506502,101.7596319,100.9971166,104.7596319,103.255065,106.7596319,105.9971166,109.7596319,110.7596319,111.7596319,111.255065,114.7596319,116.7596319,117.7596319,119.7596319,118.9971166,122.7596319,124.7596319,125.7596319,127.7596319,129.7596319,130.7596319,132.7596319,134.7596319,138.9951912,138.7596319,140.7596319,141.7596319,143.7596319,145.7596319,147.7596319,151.9951912,151.7596319,153.7596319,155.7596319,159.2881331,160.7596319,162.7596319,166.9951912,166.7596319,168.7596319,172.2881331,173.7596319,175.7596319,179.9951912,179.7596319,182.7596319,186.9951912,186.7596319,191.9951912,191.7596319,195.2881331,196.7596319,198.7596319,203.9951912,203.7596319,207.2881331,208.7596319,212.2881331,213.7596319,217.2881331,218.7596319,220.7596319,225.9951912,225.7596319,230.9951912,230.7596319,235.2881331,236.7596319,240.2881331,241.7596319,243.7596319,248.9951912,248.7596319,253.2881331,254.7596319,256.7596319,261.2881331,262.7596319,264.7596319,269.9951912,269.7596319,272.7596319,277.9951912,277.7596319,280.7596319,285.9951912,285.7596319,288.7596319,290.7596319,295.2881331,296.7596319,298.7596319,301.7596319,304.7596319,306.7596319,309.7596319,311.7596319,314.7596319,319.9951912,319.7596319,322.7596319,323.4610674,327.7596319,329.7596319,332.7596319,335.7596319,337.7596319,340.7596319,342.7596319,345.7596319,346.4610674,350.7596319,352.7596319,355.7596319,357.7596319,358.9971166,362.7596319,364.7596319,367.7596319,368.4610674,372.7596319,374.7596319,376.7596319,379.7596319,379.9971166,383.7596319,386.7596319,388.7596319,389.4610674,393.7596319,395.7596319,397.7596319,398.4610674,402.7596319,404.7596319,406.7596319,408.7596319,408.9971166,412.7596319,415.7596319,417.7596319,419.7596319,421.7596319,423.7596319,425.7596319,425.9971166,429.7596319,431.7596319,433.7596319,435.7596319,438.9951912,438.7596319,440.7596319,442.7596319,444.7596319,446.7596319,447.7596319,451.9951912,451.7596319,453.7596319,454.7596319,460.5765761,457.7596319,461.9951912,461.7596319,464.9951912,464.7596319,467.9951912,467.7596319,472.5765761,469.7596319,475.5765761,476.5765761,475.9951912,479.5765761,476.7596319,481.5765761,480.9951912,484.5765761,485.5765761,487.9961516,487.5765761,488.5765761,489.5765761,490.5765761,492.9961516,492.5765761,493.5765761,495.9961516,498.4699833,496.9961516,496.5765761,498.9961516,499.9961516,502.4699833,500.9961516,500.5765761,502.9961516,505.4699833,503.9961516,504.9961516,507.4699833,505.9961516,508.4699833,506.9961516,507.9961516,510.4699833,508.9961516,511.4699833,509.9961516,512.4699833,510.9961516,513.4699833,511.9961516,514.4699833,512.9961516,515.4699833,514.5321319,516.4699833,514.9961516,517.4699833,515.9961516,518.4699833,518.4699833,516.9961516,519.4699833,517.9961516,520.4699833,518.9961516,521.4699833,519.9961516,522.4699833,522.4699833,520.9961516,523.4699833,522.5321319,524.4699833,522.9961516,525.4699833,523.9961516,526.4699833,524.9961516,527.4699833,525.9961516,528.4699833,526.9961516,527.9961516,530.4699833,528.9961516,531.4699833,529.9961516,530.9961516,533.4699833,532.5321319,532.9961516,535.4699833,533.9961516,534.9961516,535.9961516,538.4699833,536.9961516,537.9961516,538.9961516,539.9961516,540.9961516,543.4699833,540.5765761,542.9961516,543.9961516,544.9961516,545.9961516,545.5765761,546.5765761,549.9961516,549.5765761,551.9961516,552.9961516,552.5765761,553.5765761,555.5765761,557.9961516,557.5765761,558.5765761,560.5765761,562.9961516,560.9951912,565.9961516,563.9951912,567.5765761,569.9961516,567.9951912,571.5765761,572.5765761,574.5765761,573.9951912,578.9961516,576.9951912,580.5765761,579.9951912,581.9951912,586.9961516,584.9951912,588.5765761,587.9951912,589.9951912,593.5765761,594.5765761,594.9951912,598.5765761,597.9951912,599.9951912,601.9951912,605.5765761,604.9951912,606.9951912,608.9951912,612.5765761,611.9951912,613.9951912,615.9951912,620.9961516,618.9951912,620.9951912,622.9951912,624.9951912,628.5765761,627.9951912,629.9951912,631.9951912,633.9951912,635.9951912,639.5765761,638.9951912,640.9951912,642.9951912,644.9951912,646.9951912,650.5765761,649.9951912,651.9951912,653.9951912,655.9951912,659.5765761,658.9951912,660.9951912,662.9951912,664.9951912,668.5765761,669.5765761,669.9951912,671.9951912,673.9951912,677.5765761,676.9951912,678.9951912,680.9951912,685.9961516,683.9951912,685.9951912,689.5765761,688.9951912,692.5765761,692.9951912,696.5765761,697.5765761,699.5765761,698.9951912,702.5765761,704.5765761,703.9951912,708.9961516,706.9951912,708.9951912,713.9961516,711.9951912,716.9961516,714.9951912,719.9961516,717.9951912,722.9961516,723.9961516,721.9951912,726.9961516,724.9951912,729.9961516,730.9961516,730.5765761,732.5765761,734.9961516,735.9961516,735.5765761,738.9961516,738.5765761,740.9961516,741.9961516,742.9961516,743.9961516,744.9961516,745.9961516,746.4765183,750.4699833,748.9961516,749.9961516,750.9961516,751.9961516,753.5321319,753.9961516,754.9961516,757.4699833,756.5321319,756.9961516,759.4699833,758.5321319,760.4699833,758.9961516,761.4699833,759.9961516,762.4699833,762.4699833,761.5321319,763.4699833,763.4699833,763.4699833,763.4699833,763.4699833,763.4699833,763.4699833,763.4699833,763.4699833,763.9999977,762.4699833,762.4699833,762.9999977,761.4699833,761.9999977,760.9999977,759.4699833,759.9999977,758.744935,757.9999977,756.744935,755.744935,754.744935,752.744935,751.744935,750.0028834,748.744935,747.0028834,745.744935,742.2403681,742.0028834,740.0028834,736.2403681,737.0028834,733.2403681,733.0028834,729.2403681,727.2403681,725.2403681,724.5389326,720.2403681,718.2403681,716.2403681,714.2403681,712.2403681,709.2403681,707.2403681,703.7118669,702.2403681,700.2403681,696.7118669,695.2403681,693.2403681,689.7118669,688.2403681,684.0048088,682.7118669,681.2403681,677.0048088,677.2403681,673.7118669,670.0048088,668.0048088,666.0048088,666.2403681,662.0048088,660.7118669,657.0048088,655.0048088,653.0048088,651.0048088,649.0048088,647.0048088,645.0048088,643.0048088,639.4234239,640.0048088,638.0048088,634.4234239,634.0048088,632.0048088,630.0048088,626.4234239,627.0048088,625.0048088,621.4234239,619.4234239,620.0048088,618.0048088,616.0048088,612.4234239,611.4234239,611.0048088,607.4234239,608.0048088,606.0048088,602.4234239,603.0048088,599.4234239,597.4234239,598.0048088,594.4234239,595.0048088,593.0048088,589.4234239,590.0048088,586.4234239,587.0048088,585.0048088,585.2403681,582.0048088,580.0048088,576.4234239,577.0048088,577.2403681,574.0048088,572.0048088,572.2403681,569.0048088,567.0048088,567.2403681,564.0048088,564.2403681,562.2403681,559.0048088,559.2403681,557.2403681,554.0048088,554.2403681,552.2403681,551.2403681,547.0048088,547.2403681,546.2403681,544.2403681,542.2403681,540.2403681,539.2403681,537.2403681,535.2403681,533.2403681,534.0028834,530.2403681,528.2403681,526.2403681,525.2403681,525.0028834,521.2403681,519.2403681,519.744935,516.2403681,514.2403681,514.0028834,510.2403681,510.0028834,506.2403681,507.0028834,503.2403681,503.0028834,499.2403681,499.0028834,497.0028834,493.2403681,494.0028834,490.2403681,490.0028834,488.0028834,486.0028834,482.2403681,482.0028834,480.0028834,478.0028834,474.2403681,474.0028834,472.0028834,470.744935,469.0028834,467.0028834,463.2403681,463.0028834,461.0028834,459.0028834,457.0028834,455.0028834,453.0028834,451.0028834,449.0028834,447.0028834,445.0028834,442.5389326,440.0028834,438.0028834,436.0028834,434.0028834,432.0028834,430.0028834,428.0028834,426.0028834,424.0028834,422.0028834,420.0028834,418.0028834,415.5389326,413.0028834,411.0028834,409.0028834,407.0028834,405.0028834,403.744935,400.5389326,398.0028834,396.0028834,394.0028834,392.0028834,390.0028834,387.5389326,385.0028834,383.0028834,381.0028834,378.5389326,376.0028834,374.0028834,372.0028834,370.0028834,367.5389326,365.0028834,363.0028834,360.5389326,358.0028834,356.0028834,354.0028834,351.5389326,349.0028834,347.0028834,344.5389326,342.0028834,340.0028834,337.5389326,333.2403681,333.0028834,331.0028834,328.5389326,326.0028834,322.2403681,321.5389326,319.0028834,317.0028834,313.2403681,312.0028834,310.0028834,306.2403681,305.5389326,301.2403681,301.0028834,297.2403681,296.5389326,292.2403681,292.0028834,288.2403681,286.2403681,284.2403681,283.5389326,279.2403681,277.2403681,275.2403681,273.2403681,271.2403681,269.2403681,267.2403681,265.2403681,263.2403681,261.2403681,259.2403681,255.0048088,255.2403681,253.2403681,249.0048088,249.2403681,246.0048088,246.2403681,242.0048088,238.4234239,241.2403681,237.0048088,233.4234239,234.0048088,230.4234239,231.0048088,227.4234239,228.0048088,224.4234239,223.4234239,221.4234239,219.0038484,221.0048088,216.0038484,216.4234239,214.0038484,214.4234239,212.4234239,210.0038484,209.0038484,208.0038484,207.0038484,206.0038484,205.0038484,202.5300167,204.0038484,203.0038484,202.0038484,199.5300167,201.0038484,200.0038484,197.5300167,199.0038484,198.0038484,195.5300167,197.0038484,194.5300167,196.0038484,193.5300167,195.0038484,192.5300167,194.0038484,191.5300167,191.5300167,193.0038484,190.5300167,190.5300167,192.0038484,189.5300167,189.5300167,191.0038484,188.5300167,188.5300167,190.0038484,187.5300167,187.5300167,187.5300167,188.4678681,186.5300167,186.5300167,187.4678681,185.5300167,185.5300167,185.5300167,187.0038484,184.5300167,184.5300167,185.4678681,183.5300167,183.5300167,185.0038484,182.5300167,184.0038484,181.5300167,181.5300167,183.0038484,180.5300167,182.0038484,179.5300167,181.0038484,178.5300167,180.0038484,179.0038484,176.5300167,179.4234239,177.0038484,174.5300167,176.0038484,176.4234239,174.0038484,173.0038484,173.4234239,171.0038484,170.0038484,170.4234239,168.0038484,168.4234239,167.4234239,165.0038484,165.4234239,166.0048088,162.4234239,160.0038484,162.0048088,158.4234239,159.0048088,155.4234239,156.0048088,156.2403681,150.4234239,151.0048088,149.0048088,149.2403681,145.0048088,145.2403681,141.0048088,141.2403681,137.0048088,137.2403681,135.2403681,131.7118669,130.2403681,128.2403681,126.2403681,121.0048088,121.2403681,119.2403681,117.2403681,114.2403681,110.0048088,110.2403681,107.2403681,105.2403681,103.2403681,101.2403681,98.24036808,94.00480882,94.24036808,92.24036808,90.24036808,86.00480882,86.24036808,84.24036808,80.00480882,80.24036808,77.00480882,77.24036808,71.42342395,74.24036808,68.42342395,67.42342395,70.24036808)
track_boundary1_y = (347.4699833,347.744935,344.2403681,345.744935,344.744935,343.744935,340.2403681,340.744935,337.2403681,336.2403681,336.744935,333.2403681,332.2403681,330.2403681,328.2403681,327.2403681,325.2403681,324.2403681,322.2403681,318.0048088,318.2403681,316.2403681,312.0048088,312.2403681,309.0048088,309.2403681,304.0048088,302.0048088,302.2403681,298.0048088,296.0048088,296.2403681,291.0048088,289.0048088,287.0048088,287.2403681,282.0048088,280.0048088,278.7118669,275.0048088,273.7118669,272.2403681,268.7118669,265.0048088,263.7118669,260.0048088,258.7118669,257.2403681,253.7118669,250.0048088,248.7118669,247.2403681,243.7118669,240.7118669,239.2403681,235.7118669,232.0048088,232.2403681,227.7118669,226.2403681,222.7118669,221.2403681,219.2403681,214.0048088,214.2403681,211.2403681,206.0048088,206.2403681,203.2403681,201.2403681,198.2403681,196.2403681,193.2403681,189.7118669,188.2403681,186.2403681,183.2403681,181.2403681,178.2403681,176.2403681,175.0028834,171.2403681,169.2403681,166.2403681,164.2403681,162.2403681,159.2403681,157.2403681,155.2403681,154.0028834,150.2403681,148.2403681,146.2403681,143.2403681,141.2403681,141.0028834,137.2403681,135.2403681,133.2403681,131.2403681,128.2403681,126.2403681,126.0028834,122.2403681,120.2403681,119.2403681,117.2403681,115.2403681,113.2403681,111.2403681,109.2403681,108.2403681,106.2403681,104.2403681,102.2403681,101.2403681,99.24036808,98.24036808,94.00480882,94.24036808,93.24036808,92.24036808,86.42342395,89.24036808,87.24036808,82.42342395,85.24036808,82.00480882,82.24036808,77.42342395,80.24036808,75.42342395,78.24036808,73.42342395,72.42342395,71.42342395,74.24036808,66.53001668,69.42342395,68.42342395,64.53001668,67.42342395,66.42342395,62.53001668,65.42342395,61.53001668,63.00384844,60.53001668,63.42342395,59.53001668,61.00384844,58.53001668,58.53001668,58.53001668,61.42342395,57.53001668,57.53001668,57.53001668,57.53001668,59.00384844,56.53001668,56.53001668,56.53001668,56.53001668,56.53001668,56.53001668,56.53001668,56.53001668,56.00000231,57.53001668,57.53001668,57.53001668,57.53001668,57.53001668,57.53001668,57.00000231,58.53001668,58.53001668,58.53001668,58.05093489,59.53001668,59.53001668,59.00000231,60.53001668,60.53001668,60.05093489,61.53001668,61.53001668,61.00000231,62.53001668,62.53001668,62.00000231,63.53001668,63.00000231,64.53001668,64.05093489,65.53001668,65.53001668,65.00000231,66.53001668,66.05093489,67.53001668,67.05093489,68.53001668,68.05093489,69.53001668,69.53001668,69.00000231,70.53001668,70.00000231,71.53001668,71.05093489,72.53001668,72.05093489,73.53001668,73.53001668,73.00000231,74.53001668,74.05093489,75.53001668,75.53001668,75.05093489,76.53001668,76.53001668,76.00000231,77.53001668,77.53001668,77.00000231,78.53001668,78.53001668,78.00000231,79.53001668,79.53001668,79.53001668,79.05093489,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.00000231,81.53001668,81.53001668,82.46786808,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,80.53001668,81.46786808,79.53001668,79.53001668,79.53001668,79.53001668,81.00384844,78.53001668,78.53001668,78.53001668,79.46786808,77.53001668,77.53001668,77.53001668,77.53001668,79.00384844,76.53001668,76.53001668,76.53001668,77.46786808,75.53001668,75.53001668,75.53001668,76.46786808,74.53001668,74.53001668,74.53001668,74.53001668,76.00384844,73.53001668,73.53001668,73.53001668,73.53001668,73.53001668,73.53001668,73.53001668,75.00384844,72.53001668,72.53001668,72.53001668,72.53001668,72.00000231,73.53001668,73.53001668,73.53001668,73.53001668,73.53001668,73.53001668,73.00000231,74.53001668,74.53001668,74.53001668,74.25506502,75.53001668,75.00000231,76.53001668,76.00000231,77.53001668,77.00000231,78.53001668,78.25506502,79.53001668,79.25506502,80.25506502,81.00000231,82.25506502,83.53001668,83.25506502,84.00000231,85.25506502,86.25506502,87.99711656,89.25506502,90.25506502,91.25506502,92.25506502,93.99711656,95.25506502,96.25506502,97.99711656,101.7596319,100.9971166,102.255065,103.9971166,105.9971166,109.7596319,108.9971166,110.255065,111.9971166,115.7596319,115.9971166,117.9971166,121.7596319,120.9971166,124.7596319,124.9971166,126.9971166,130.7596319,130.9971166,134.7596319,134.9971166,138.7596319,138.9971166,142.7596319,142.9971166,146.7596319,146.9971166,150.7596319,151.4610674,155.7596319,155.9971166,159.7596319,159.9971166,163.7596319,166.7596319,166.9971166,170.7596319,170.9971166,174.7596319,175.9971166,179.7596319,179.9971166,183.7596319,186.7596319,186.9971166,190.7596319,191.4610674,195.7596319,195.9971166,199.7596319,200.9971166,204.7596319,204.9971166,208.7596319,209.9971166,213.7596319,213.9971166,215.9971166,219.7596319,220.9971166,224.7596319,224.9971166,226.9971166,230.7596319,231.4610674,233.9971166,237.7596319,237.9971166,239.9971166,241.9971166,245.7596319,245.9971166,247.9971166,249.9971166,251.9971166,253.9971166,257.7596319,257.255065,258.9971166,260.9971166,262.9971166,264.9971166,266.255065,267.255065,269.9971166,271.255065,272.9971166,274.9971166,276.255065,277.255065,279.255065,280.9971166,282.255065,283.255065,285.255065,286.9971166,288.0000023,289.9971166,291.0000023,292.255065,293.9971166,295.0000023,296.255065,297.255065,299.255065,300.0000023,301.9971166,303.0000023,304.255065,305.0000023,306.0000023,307.9971166,309.0000023,310.255065,311.0000023,312.0000023,313.255065,314.255065,316.0000023,317.255065,318.0000023,319.0000023,320.0000023,321.255065,322.0000023,323.0000023,324.0000023,325.255065,326.0000023,327.0000023,328.0000023,329.9971166,331.0000023,332.0000023,333.0000023,334.0000023,335.255065,336.0000023,337.0000023,338.0000023,339.0000023,340.0000023,341.255065,342.0000023,343.0000023,344.0000023,345.0000023,346.0000023,347.255065,348.0000023,349.0000023,350.0000023,351.0000023,352.255065,353.0000023,354.0000023,355.0000023,356.0000023,357.255065,358.255065,360.0000023,361.0000023,362.0000023,363.255065,364.0000023,365.0000023,366.0000023,367.9971166,369.0000023,370.0000023,371.255065,372.0000023,373.255065,375.0000023,376.255065,377.255065,379.255065,380.0000023,381.255065,383.255065,384.0000023,385.9971166,387.0000023,388.0000023,389.9971166,391.0000023,392.9971166,394.0000023,395.9971166,397.0000023,398.9971166,400.9971166,402.0000023,403.9971166,405.0000023,406.9971166,408.9971166,410.255065,412.255065,413.9971166,415.9971166,417.255065,419.9971166,421.255065,422.9971166,424.9971166,426.9971166,428.9971166,430.9971166,432.9971166,434.6564005,439.7596319,439.9971166,441.9971166,443.9971166,445.9971166,448.4610674,450.9971166,452.9971166,456.7596319,457.4610674,459.9971166,463.7596319,464.4610674,468.7596319,468.9971166,472.7596319,473.9971166,477.7596319,479.7596319,480.4610674,484.7596319,486.7596319,488.7596319,490.7596319,492.7596319,494.7596319,497.7596319,499.7596319,501.7596319,505.9951912,505.7596319,507.7596319,510.9951912,510.7596319,514.9951912,516.9951912,516.7596319,519.9951912,523.5765761,522.9951912,526.5765761,527.5765761,528.5765761,530.5765761,531.5765761,533.9961516,533.5765761,535.9961516,535.5765761,539.4699833,537.9961516,538.9961516,541.4699833,539.9961516,542.4699833,540.9961516,543.4699833,543.4699833,543.4699833,542.5321319,544.4699833,544.4699833,544.4699833,544.4699833,544.4699833,544.4699833,544.4699833,544.9490651,543.4699833,543.4699833,543.9490651,542.4699833,542.4699833,542.9490651,541.4699833,541.9999977,540.9490651,539.4699833,539.9999977,538.4699833,538.9490651,537.9999977,536.9999977,535.9999977,534.4699833,534.9999977,533.9490651,532.9999977,531.9999977,530.9999977,529.9999977,528.9999977,527.9999977,526.9999977,525.9999977,524.744935,523.9999977,522.9999977,521.744935,519.9999977,518.9999977,517.9999977,516.744935,515.9999977,514.9999977,513.744935,511.744935,510.9999977,509.9999977,508.9999977,507.744935,506.744935,504.9999977,503.744935,502.9999977,501.9999977,500.744935,499.9999977,498.744935,496.744935,495.9999977,494.744935,493.9999977,492.9999977,491.744935,490.9999977,489.744935,488.9999977,487.9999977,486.4699833,486.9999977,485.9999977,484.744935,483.9999977,482.4699833,482.9999977,481.9999977,480.4699833,480.9999977,479.9999977,478.4699833,478.9999977,477.4699833,477.4699833,477.9999977,476.4699833,476.4699833,476.9999977,475.4699833,475.4699833,475.4699833,475.9999977,474.4699833,474.4699833,474.4699833,474.4699833,474.4699833,474.4699833,474.4699833,474.4699833,474.4699833,472.9961516,475.4699833,475.4699833,475.4699833,475.4699833,473.9961516,476.4699833,476.4699833,473.5765761,477.4699833,477.4699833,475.9961516,478.4699833,476.9961516,479.4699833,477.9961516,480.4699833,478.9961516,481.4699833,479.9961516,480.9961516,483.4699833,481.9961516,484.4699833,482.9961516,483.9961516,484.9961516,487.4699833,485.9961516,486.9961516,487.9961516,490.4699833,488.9961516,489.9961516,489.5765761,491.9961516,492.9961516,495.4699833,493.9961516,494.9961516,495.9961516,496.9961516,497.9961516,498.9961516,499.9961516,500.9961516,501.9961516,502.9961516,504.5321319,504.9961516,505.9961516,506.9961516,507.9961516,508.9961516,509.9961516,510.9961516,511.9961516,512.9961516,513.9961516,514.9961516,515.9961516,517.5321319,517.9961516,518.9961516,519.9961516,520.9961516,521.9961516,521.5765761,525.5321319,525.9961516,526.9961516,527.9961516,528.9961516,529.9961516,531.5321319,531.9961516,532.9961516,533.9961516,535.5321319,535.9961516,536.9961516,537.9961516,538.9961516,540.5321319,540.9961516,541.9961516,543.5321319,543.9961516,544.9961516,545.9961516,547.5321319,547.9961516,548.9961516,550.5321319,550.9961516,551.9961516,553.5321319,555.4699833,553.9961516,554.9961516,556.5321319,556.9961516,559.4699833,558.5321319,558.9961516,559.9961516,562.4699833,560.9961516,561.9961516,564.4699833,563.5321319,565.4699833,563.9961516,566.4699833,565.5321319,567.4699833,565.9961516,568.4699833,568.4699833,568.4699833,567.5321319,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.4699833,569.9999977,568.4699833,568.4699833,568.9999977,567.4699833,567.9999977,566.4699833,566.9999977,565.744935,564.4699833,564.9999977,563.744935,562.9999977,561.744935,560.9999977,559.744935,558.9999977,557.744935,556.744935,554.744935,553.0028834,551.9999977,550.0028834,548.744935,547.0028834,545.744935,543.744935,542.0028834,540.0028834,538.0028834,536.0028834,534.0028834,532.0028834,528.2403681,528.0028834,526.0028834,524.0028834,520.2403681,520.0028834,518.0028834,514.2403681,514.0028834,512.0028834,508.2403681,507.0028834,503.2403681,503.0028834,499.2403681,498.0028834,494.2403681,494.0028834,490.2403681,487.2403681,487.0028834,483.2403681,480.2403681,480.0028834,476.2403681,473.2403681,473.0028834,469.2403681,466.2403681,466.0028834,462.2403681,459.2403681,457.2403681,456.5389326,452.2403681,450.2403681,449.5389326,445.2403681,443.2403681,441.2403681,440.0028834,436.2403681,434.2403681,433.5389326,429.2403681,427.2403681,427.0028834,423.2403681,423.0028834,419.2403681,416.2403681,416.0028834,412.2403681,412.0028834,408.2403681,408.0028834,404.2403681,404.0028834,402.0028834,398.2403681,398.744935,397.0028834,393.2403681,393.0028834,391.744935,390.0028834,388.0028834,386.744935,385.0028834,383.0028834,381.744935,380.0028834,378.744935,377.744935,376.0028834,374.744935,373.9999977,372.744935,371.0028834,369.9999977,368.744935,367.9999977,366.744935,365.9999977,364.4699833,364.744935,363.9999977,362.9999977,361.4699833,361.9999977,360.4699833,360.9999977,359.4699833,359.9999977,358.4699833,358.4699833,358.9490651,357.4699833,357.4699833,357.4699833,357.9999977,356.4699833,356.4699833,356.4699833,356.4699833,356.9999977,355.4699833,355.4699833,355.4699833,355.4699833,355.4699833,355.4699833,355.9999977,354.4699833,354.4699833,354.4699833,354.9999977,353.4699833,353.4699833,353.9999977,352.4699833,352.9999977,351.4699833,351.744935,350.4699833,350.744935,349.744935,348.4699833)
track_boundary2_x = (69.24036808,69.74493498,68.46998332,68.74493498,67.74493498,66.74493498,65.46998332,65.74493498,64.46998332,64.46998332,64.74493498,63.46998332,63.46998332,63.46998332,63.46998332,63.46998332,63.46998332,63.46998332,63.46998332,61.99615156,64.46998332,64.46998332,62.99615156,65.46998332,63.99615156,66.46998332,64.99615156,65.99615156,68.46998332,66.99615156,67.99615156,70.46998332,68.99615156,69.99615156,70.99615156,73.46998332,71.99615156,72.99615156,74.53213192,74.99615156,76.53213192,78.46998332,77.53213192,77.99615156,79.53213192,79.99615156,81.53213192,83.46998332,82.53213192,82.99615156,84.53213192,86.46998332,85.53213192,86.53213192,88.46998332,87.53213192,87.99615156,90.46998332,89.53213192,91.46998332,90.53213192,92.46998332,92.46998332,90.99615156,93.46998332,93.46998332,91.99615156,94.46998332,94.46998332,94.46998332,94.46998332,94.46998332,94.46998332,93.53213192,95.46998332,95.46998332,95.46998332,95.46998332,95.46998332,95.46998332,95.99999769,94.46998332,94.46998332,94.46998332,94.46998332,94.46998332,94.46998332,94.46998332,94.46998332,94.99999769,93.46998332,93.46998332,93.46998332,93.46998332,93.46998332,93.99999769,92.46998332,92.46998332,92.46998332,92.46998332,92.46998332,92.46998332,92.99999769,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,91.46998332,89.99615156,92.46998332,92.46998332,92.46998332,89.57657605,93.46998332,93.46998332,90.57657605,94.46998332,92.99615156,95.46998332,92.57657605,96.46998332,93.57657605,97.46998332,94.57657605,95.57657605,96.57657605,100.4699833,93.75963192,98.57657605,99.57657605,96.75963192,101.5765761,102.5765761,99.75963192,104.5765761,101.7596319,104.9951912,104.7596319,109.5765761,106.7596319,109.9951912,109.7596319,110.7596319,111.7596319,117.5765761,114.7596319,116.7596319,117.7596319,119.7596319,122.9951912,122.7596319,124.7596319,125.7596319,127.7596319,129.7596319,130.7596319,132.7596319,134.7596319,134.9971166,138.7596319,140.7596319,141.7596319,143.7596319,145.7596319,147.7596319,147.9971166,151.7596319,153.7596319,155.7596319,156.4610674,160.7596319,162.7596319,162.9971166,166.7596319,168.7596319,169.4610674,173.7596319,175.7596319,175.9971166,179.7596319,182.7596319,182.9971166,186.7596319,187.9971166,191.7596319,192.4610674,196.7596319,198.7596319,199.9971166,203.7596319,204.4610674,208.7596319,209.4610674,213.7596319,214.4610674,218.7596319,220.7596319,221.9971166,225.7596319,226.9971166,230.7596319,232.4610674,236.7596319,237.4610674,241.7596319,243.7596319,244.9971166,248.7596319,250.4610674,254.7596319,256.7596319,258.4610674,262.7596319,264.7596319,265.9971166,269.7596319,272.7596319,273.9971166,277.7596319,280.7596319,281.9971166,285.7596319,288.7596319,290.7596319,292.4610674,296.7596319,298.7596319,301.7596319,304.7596319,306.7596319,309.7596319,311.7596319,314.7596319,315.9971166,319.7596319,322.7596319,326.2881331,327.7596319,329.7596319,332.7596319,335.7596319,337.7596319,340.7596319,342.7596319,345.7596319,349.2881331,350.7596319,352.7596319,355.7596319,357.7596319,362.9951912,362.7596319,364.7596319,367.7596319,371.2881331,372.7596319,374.7596319,376.7596319,379.7596319,383.9951912,383.7596319,386.7596319,388.7596319,392.2881331,393.7596319,395.7596319,397.7596319,401.2881331,402.7596319,404.7596319,406.7596319,408.7596319,412.9951912,412.7596319,415.7596319,417.7596319,419.7596319,421.7596319,423.7596319,425.7596319,429.9951912,429.7596319,431.7596319,433.7596319,435.7596319,434.9971166,438.7596319,440.7596319,442.7596319,444.7596319,446.7596319,447.7596319,447.9971166,451.7596319,453.7596319,454.7596319,454.255065,457.7596319,457.9971166,461.7596319,460.9971166,464.7596319,463.9971166,467.7596319,466.255065,469.7596319,469.255065,470.255065,471.9971166,473.255065,476.7596319,475.255065,476.9971166,478.255065,479.255065,480.0000023,481.255065,482.255065,483.255065,484.255065,485.0000023,486.255065,487.255065,488.0000023,489.5300167,489.0000023,490.255065,491.0000023,492.0000023,493.5300167,493.0000023,494.255065,495.0000023,496.5300167,496.0000023,497.0000023,498.5300167,498.0000023,499.5300167,499.0000023,500.0000023,501.5300167,501.0000023,502.5300167,502.0000023,503.5300167,503.0000023,504.5300167,504.0000023,505.5300167,505.0000023,506.5300167,506.0509349,507.5300167,507.0000023,508.5300167,508.0000023,509.5300167,509.5300167,509.0000023,510.5300167,510.0000023,511.5300167,511.0000023,512.5300167,512.0000023,513.5300167,513.5300167,513.0000023,514.5300167,514.0509349,515.5300167,515.0000023,516.5300167,516.0000023,517.5300167,517.0000023,518.5300167,518.0000023,519.5300167,519.0000023,520.0000023,521.5300167,521.0000023,522.5300167,522.0000023,523.0000023,524.5300167,524.0509349,525.0000023,526.5300167,526.0000023,527.0000023,528.0000023,529.5300167,529.0000023,530.0000023,531.0000023,532.0000023,533.0000023,534.5300167,534.255065,535.0000023,536.0000023,537.0000023,538.0000023,539.255065,540.255065,542.0000023,543.255065,544.0000023,545.0000023,546.255065,547.255065,549.255065,550.0000023,551.255065,552.255065,554.255065,555.0000023,556.9971166,558.0000023,559.9971166,561.255065,562.0000023,563.9971166,565.255065,566.255065,568.255065,569.9971166,571.0000023,572.9971166,574.255065,575.9971166,577.9971166,579.0000023,580.9971166,582.255065,583.9971166,585.9971166,587.255065,588.255065,590.9971166,592.255065,593.9971166,595.9971166,597.9971166,599.255065,600.9971166,602.9971166,604.9971166,606.255065,607.9971166,609.9971166,611.9971166,613.0000023,614.9971166,616.9971166,618.9971166,620.9971166,622.255065,623.9971166,625.9971166,627.9971166,629.9971166,631.9971166,633.255065,634.9971166,636.9971166,638.9971166,640.9971166,642.9971166,644.255065,645.9971166,647.9971166,649.9971166,651.9971166,653.255065,654.9971166,656.9971166,658.9971166,660.9971166,662.255065,663.255065,665.9971166,667.9971166,669.9971166,671.255065,672.9971166,674.9971166,676.9971166,678.0000023,679.9971166,681.9971166,683.255065,684.9971166,686.255065,688.9971166,690.255065,691.255065,693.255065,694.9971166,696.255065,698.255065,699.9971166,701.0000023,702.9971166,704.9971166,706.0000023,707.9971166,709.0000023,710.9971166,712.0000023,713.9971166,715.0000023,716.0000023,717.9971166,719.0000023,720.9971166,722.0000023,723.0000023,724.255065,726.255065,727.0000023,728.0000023,729.255065,731.0000023,732.255065,733.0000023,734.0000023,735.0000023,736.0000023,737.0000023,738.0000023,739.0380165,741.5300167,741.0000023,742.0000023,743.0000023,744.0000023,745.0509349,746.0000023,747.0000023,748.5300167,748.0509349,749.0000023,750.5300167,750.0509349,751.5300167,751.0000023,752.5300167,752.0000023,753.5300167,753.5300167,753.0509349,754.5300167,754.5300167,754.5300167,754.5300167,754.5300167,754.5300167,754.5300167,754.5300167,754.5300167,756.0038484,753.5300167,753.5300167,755.0038484,752.5300167,754.0038484,753.0038484,750.5300167,752.0038484,752.4234239,750.0038484,750.4234239,749.4234239,748.4234239,746.4234239,745.4234239,746.0048088,742.4234239,743.0048088,739.4234239,742.2403681,738.0048088,736.0048088,736.2403681,733.0048088,733.2403681,729.0048088,729.2403681,727.2403681,725.2403681,721.7118669,720.2403681,718.2403681,716.2403681,714.2403681,712.2403681,709.2403681,707.2403681,706.5389326,702.2403681,700.2403681,699.5389326,695.2403681,693.2403681,692.5389326,688.2403681,688.0028834,685.5389326,681.2403681,681.0028834,677.2403681,676.5389326,674.0028834,672.0028834,670.0028834,666.2403681,666.0028834,663.5389326,661.0028834,659.0028834,657.0028834,655.0028834,653.0028834,651.0028834,649.0028834,647.0028834,645.744935,644.0028834,642.0028834,640.744935,638.0028834,636.0028834,634.0028834,632.744935,631.0028834,629.0028834,627.744935,625.744935,624.0028834,622.0028834,620.0028834,618.744935,617.744935,615.0028834,613.744935,612.0028834,610.0028834,608.744935,607.0028834,605.744935,603.744935,602.0028834,600.744935,599.0028834,597.0028834,595.744935,594.0028834,592.744935,591.0028834,589.0028834,585.2403681,586.0028834,584.0028834,582.744935,581.0028834,577.2403681,578.0028834,576.0028834,572.2403681,573.0028834,571.0028834,567.2403681,568.0028834,564.2403681,562.2403681,563.0028834,559.2403681,557.2403681,558.0028834,554.2403681,552.2403681,551.2403681,551.0028834,547.2403681,546.2403681,544.2403681,542.2403681,540.2403681,539.2403681,537.2403681,535.2403681,533.2403681,530.0048088,530.2403681,528.2403681,526.2403681,525.2403681,521.0048088,521.2403681,519.2403681,513.4234239,516.2403681,514.2403681,510.0048088,510.2403681,506.0048088,506.2403681,503.0048088,503.2403681,499.0048088,499.2403681,495.0048088,493.0048088,493.2403681,490.0048088,490.2403681,486.0048088,484.0048088,482.0048088,482.2403681,478.0048088,476.0048088,474.0048088,474.2403681,470.0048088,468.0048088,464.4234239,465.0048088,463.0048088,463.2403681,459.0048088,457.0048088,455.0048088,453.0048088,451.0048088,449.0048088,447.0048088,445.0048088,443.0048088,441.0048088,439.7118669,436.0048088,434.0048088,432.0048088,430.0048088,428.0048088,426.0048088,424.0048088,422.0048088,420.0048088,418.0048088,416.0048088,414.0048088,412.7118669,409.0048088,407.0048088,405.0048088,403.0048088,401.0048088,397.4234239,397.7118669,394.0048088,392.0048088,390.0048088,388.0048088,386.0048088,384.7118669,381.0048088,379.0048088,377.0048088,375.7118669,372.0048088,370.0048088,368.0048088,366.0048088,364.7118669,361.0048088,359.0048088,357.7118669,354.0048088,352.0048088,350.0048088,348.7118669,345.0048088,343.0048088,341.7118669,338.0048088,336.0048088,334.7118669,333.2403681,329.0048088,327.0048088,325.7118669,322.0048088,322.2403681,318.7118669,315.0048088,313.0048088,313.2403681,308.0048088,306.0048088,306.2403681,302.7118669,301.2403681,297.0048088,297.2403681,293.7118669,292.2403681,288.0048088,288.2403681,286.2403681,284.2403681,280.7118669,279.2403681,277.2403681,275.2403681,273.2403681,271.2403681,269.2403681,267.2403681,265.2403681,263.2403681,261.2403681,259.2403681,259.0028834,255.2403681,253.2403681,253.0028834,249.2403681,250.0028834,246.2403681,246.0028834,244.744935,241.2403681,241.0028834,239.744935,238.0028834,236.744935,235.0028834,233.744935,232.0028834,230.744935,229.744935,227.744935,226.9999977,225.0028834,223.9999977,222.744935,221.9999977,220.744935,218.744935,217.9999977,216.9999977,215.9999977,214.9999977,213.9999977,212.9999977,211.4699833,211.9999977,210.9999977,209.9999977,208.4699833,208.9999977,207.9999977,206.4699833,206.9999977,205.9999977,204.4699833,204.9999977,203.4699833,203.9999977,202.4699833,202.9999977,201.4699833,201.9999977,200.4699833,200.4699833,200.9999977,199.4699833,199.4699833,199.9999977,198.4699833,198.4699833,198.9999977,197.4699833,197.4699833,197.9999977,196.4699833,196.4699833,196.4699833,196.9490651,195.4699833,195.4699833,195.9490651,194.4699833,194.4699833,194.4699833,194.9999977,193.4699833,193.4699833,193.9490651,192.4699833,192.4699833,192.9999977,191.4699833,191.9999977,190.4699833,190.4699833,190.9999977,189.4699833,189.9999977,188.4699833,188.9999977,187.4699833,187.9999977,186.9999977,185.4699833,185.744935,184.9999977,183.4699833,183.9999977,182.744935,181.9999977,180.9999977,179.744935,178.9999977,177.9999977,176.744935,175.9999977,174.744935,173.744935,172.9999977,171.744935,170.0028834,168.744935,167.9999977,166.0028834,164.744935,163.0028834,161.744935,160.0028834,156.2403681,156.744935,155.0028834,153.0028834,149.2403681,149.0028834,145.2403681,145.0028834,141.2403681,141.0028834,137.2403681,135.2403681,134.5389326,130.2403681,128.2403681,126.2403681,125.0028834,121.2403681,119.2403681,117.2403681,114.2403681,114.0028834,110.2403681,107.2403681,105.2403681,103.2403681,101.2403681,98.24036808,98.00288344,94.24036808,92.24036808,90.24036808,90.00288344,86.24036808,84.24036808,84.00288344,80.24036808,81.00288344,77.24036808,77.74493498,74.24036808,74.74493498,73.74493498,70.24036808)
track_boundary2_y = (338.5300167,341.4234239,344.2403681,339.4234239,338.4234239,337.4234239,340.2403681,334.4234239,337.2403681,336.2403681,330.4234239,333.2403681,332.2403681,330.2403681,328.2403681,327.2403681,325.2403681,324.2403681,322.2403681,322.0028834,318.2403681,316.2403681,316.0028834,312.2403681,313.0028834,309.2403681,308.0028834,306.0028834,302.2403681,302.0028834,300.0028834,296.2403681,295.0028834,293.0028834,291.0028834,287.2403681,286.0028834,284.0028834,281.5389326,279.0028834,276.5389326,272.2403681,271.5389326,269.0028834,266.5389326,264.0028834,261.5389326,257.2403681,256.5389326,254.0028834,251.5389326,247.2403681,246.5389326,243.5389326,239.2403681,238.5389326,236.0028834,232.2403681,230.5389326,226.2403681,225.5389326,221.2403681,219.2403681,218.0028834,214.2403681,211.2403681,210.0028834,206.2403681,203.2403681,201.2403681,198.2403681,196.2403681,193.2403681,192.5389326,188.2403681,186.2403681,183.2403681,181.2403681,178.2403681,176.2403681,171.0048088,171.2403681,169.2403681,166.2403681,164.2403681,162.2403681,159.2403681,157.2403681,155.2403681,150.0048088,150.2403681,148.2403681,146.2403681,143.2403681,141.2403681,137.0048088,137.2403681,135.2403681,133.2403681,131.2403681,128.2403681,126.2403681,122.0048088,122.2403681,120.2403681,119.2403681,117.2403681,115.2403681,113.2403681,111.2403681,109.2403681,108.2403681,106.2403681,104.2403681,102.2403681,101.2403681,99.24036808,98.24036808,98.00288344,94.24036808,93.24036808,92.24036808,92.74493498,89.24036808,87.24036808,88.74493498,85.24036808,86.00288344,82.24036808,83.74493498,80.24036808,81.74493498,78.24036808,79.74493498,78.74493498,77.74493498,74.24036808,75.46998332,75.74493498,74.74493498,73.46998332,73.74493498,72.74493498,71.46998332,71.74493498,70.46998332,70.99999769,69.46998332,69.74493498,68.46998332,68.99999769,67.46998332,67.46998332,67.46998332,67.74493498,66.46998332,66.46998332,66.46998332,66.46998332,66.99999769,65.46998332,65.46998332,65.46998332,65.46998332,65.46998332,65.46998332,65.46998332,65.46998332,63.99615156,66.46998332,66.46998332,66.46998332,66.46998332,66.46998332,66.46998332,64.99615156,67.46998332,67.46998332,67.46998332,66.53213192,68.46998332,68.46998332,66.99615156,69.46998332,69.46998332,68.53213192,70.46998332,70.46998332,68.99615156,71.46998332,71.46998332,69.99615156,72.46998332,70.99615156,73.46998332,72.53213192,74.46998332,74.46998332,72.99615156,75.46998332,74.53213192,76.46998332,75.53213192,77.46998332,76.53213192,78.46998332,78.46998332,76.99615156,79.46998332,77.99615156,80.46998332,79.53213192,81.46998332,80.53213192,82.46998332,82.46998332,80.99615156,83.46998332,82.53213192,84.46998332,84.46998332,83.53213192,85.46998332,85.46998332,83.99615156,86.46998332,86.46998332,84.99615156,87.46998332,87.46998332,85.99615156,88.46998332,88.46998332,88.46998332,87.53213192,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,87.99615156,90.46998332,90.46998332,90.94906511,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.46998332,89.94906511,88.46998332,88.46998332,88.46998332,88.46998332,88.99999769,87.46998332,87.46998332,87.46998332,87.94906511,86.46998332,86.46998332,86.46998332,86.46998332,86.99999769,85.46998332,85.46998332,85.46998332,85.94906511,84.46998332,84.46998332,84.46998332,84.94906511,83.46998332,83.46998332,83.46998332,83.46998332,83.99999769,82.46998332,82.46998332,82.46998332,82.46998332,82.46998332,82.46998332,82.46998332,82.99999769,81.46998332,81.46998332,81.46998332,81.46998332,79.99615156,82.46998332,82.46998332,82.46998332,82.46998332,82.46998332,82.46998332,80.99615156,83.46998332,83.46998332,83.46998332,80.57657605,84.46998332,82.99615156,85.46998332,83.99615156,86.46998332,84.99615156,87.46998332,84.57657605,88.46998332,85.57657605,86.57657605,88.99615156,88.57657605,92.46998332,89.57657605,91.99615156,91.57657605,92.57657605,91.99519118,95.57657605,96.57657605,97.57657605,98.57657605,97.99519118,101.5765761,102.5765761,101.9951912,101.7596319,104.9951912,108.5765761,107.9951912,109.9951912,109.7596319,112.9951912,116.5765761,115.9951912,115.7596319,119.9951912,121.9951912,121.7596319,124.9951912,124.7596319,128.9951912,130.9951912,130.7596319,134.9951912,134.7596319,138.9951912,138.7596319,142.9951912,142.7596319,146.9951912,146.7596319,150.9951912,150.7596319,154.2881331,155.7596319,159.9951912,159.7596319,163.9951912,163.7596319,166.7596319,170.9951912,170.7596319,174.9951912,174.7596319,179.9951912,179.7596319,183.9951912,183.7596319,186.7596319,190.9951912,190.7596319,194.2881331,195.7596319,199.9951912,199.7596319,204.9951912,204.7596319,208.9951912,208.7596319,213.9951912,213.7596319,217.9951912,219.9951912,219.7596319,224.9951912,224.7596319,228.9951912,230.9951912,230.7596319,234.2881331,237.9951912,237.7596319,241.9951912,243.9951912,245.9951912,245.7596319,249.9951912,251.9951912,253.9951912,255.9951912,257.9951912,257.7596319,263.5765761,262.9951912,264.9951912,266.9951912,268.9951912,272.5765761,273.5765761,273.9951912,277.5765761,276.9951912,278.9951912,282.5765761,283.5765761,285.5765761,284.9951912,288.5765761,289.5765761,291.5765761,290.9951912,295.9961516,293.9951912,298.9961516,298.5765761,297.9951912,302.9961516,302.5765761,303.5765761,305.5765761,307.9961516,305.9951912,310.9961516,310.5765761,312.9961516,313.9961516,311.9951912,316.9961516,316.5765761,318.9961516,319.9961516,319.5765761,320.5765761,323.9961516,323.5765761,325.9961516,326.9961516,327.9961516,327.5765761,329.9961516,330.9961516,331.9961516,331.5765761,333.9961516,334.9961516,335.9961516,333.9951912,338.9961516,339.9961516,340.9961516,341.9961516,341.5765761,343.9961516,344.9961516,345.9961516,346.9961516,347.9961516,347.5765761,349.9961516,350.9961516,351.9961516,352.9961516,353.9961516,353.5765761,355.9961516,356.9961516,357.9961516,358.9961516,358.5765761,360.9961516,361.9961516,362.9961516,363.9961516,363.5765761,364.5765761,367.9961516,368.9961516,369.9961516,369.5765761,371.9961516,372.9961516,373.9961516,371.9951912,376.9961516,377.9961516,377.5765761,379.9961516,379.5765761,382.9961516,382.5765761,383.5765761,385.5765761,387.9961516,387.5765761,389.5765761,391.9961516,389.9951912,394.9961516,395.9961516,393.9951912,398.9961516,396.9951912,401.9961516,399.9951912,404.9961516,402.9951912,404.9951912,409.9961516,407.9951912,412.9961516,410.9951912,412.9951912,416.5765761,418.5765761,417.9951912,419.9951912,423.5765761,423.9951912,427.5765761,426.9951912,428.9951912,430.9951912,432.9951912,434.9951912,436.9951912,439.6154017,439.7596319,443.9951912,445.9951912,447.9951912,449.9951912,451.2881331,454.9951912,456.9951912,456.7596319,460.2881331,463.9951912,463.7596319,467.2881331,468.7596319,472.9951912,472.7596319,477.9951912,477.7596319,479.7596319,483.2881331,484.7596319,486.7596319,488.7596319,490.7596319,492.7596319,494.7596319,497.7596319,499.7596319,501.7596319,501.9971166,505.7596319,507.7596319,506.9971166,510.7596319,510.9971166,512.9971166,516.7596319,515.9971166,517.255065,518.9971166,520.255065,521.255065,522.255065,524.255065,525.255065,526.0000023,527.255065,528.0000023,529.255065,530.5300167,530.0000023,531.0000023,532.5300167,532.0000023,533.5300167,533.0000023,534.5300167,534.5300167,534.5300167,534.0509349,535.5300167,535.5300167,535.5300167,535.5300167,535.5300167,535.5300167,535.5300167,536.4678681,534.5300167,534.5300167,535.4678681,533.5300167,533.5300167,534.4678681,532.5300167,534.0038484,532.4678681,530.5300167,532.0038484,529.5300167,530.4678681,530.0038484,529.0038484,528.0038484,525.5300167,527.0038484,525.4678681,525.0038484,524.0038484,523.0038484,522.0038484,521.0038484,520.0038484,519.0038484,518.0038484,518.4234239,516.0038484,515.0038484,515.4234239,512.0038484,511.0038484,510.0038484,510.4234239,508.0038484,507.0038484,507.4234239,505.4234239,503.0038484,502.0038484,501.0038484,501.4234239,500.4234239,497.0038484,497.4234239,495.0038484,494.0038484,494.4234239,492.0038484,492.4234239,490.4234239,488.0038484,488.4234239,486.0038484,485.0038484,485.4234239,483.0038484,483.4234239,481.0038484,480.0038484,477.5300167,479.0038484,478.0038484,478.4234239,476.0038484,473.5300167,475.0038484,474.0038484,471.5300167,473.0038484,472.0038484,469.5300167,471.0038484,468.5300167,468.5300167,470.0038484,467.5300167,467.5300167,469.0038484,466.5300167,466.5300167,466.5300167,468.0038484,465.5300167,465.5300167,465.5300167,465.5300167,465.5300167,465.5300167,465.5300167,465.5300167,465.5300167,465.0000023,466.5300167,466.5300167,466.5300167,466.5300167,466.0000023,467.5300167,467.5300167,467.255065,468.5300167,468.5300167,468.0000023,469.5300167,469.0000023,470.5300167,470.0000023,471.5300167,471.0000023,472.5300167,472.0000023,473.0000023,474.5300167,474.0000023,475.5300167,475.0000023,476.0000023,477.0000023,478.5300167,478.0000023,479.0000023,480.0000023,481.5300167,481.0000023,482.0000023,483.255065,484.0000023,485.0000023,486.5300167,486.0000023,487.0000023,488.0000023,489.0000023,490.0000023,491.0000023,492.0000023,493.0000023,494.0000023,495.0000023,496.0509349,497.0000023,498.0000023,499.0000023,500.0000023,501.0000023,502.0000023,503.0000023,504.0000023,505.0000023,506.0000023,507.0000023,508.0000023,509.0509349,510.0000023,511.0000023,512.0000023,513.0000023,514.0000023,515.255065,517.0509349,518.0000023,519.0000023,520.0000023,521.0000023,522.0000023,523.0509349,524.0000023,525.0000023,526.0000023,527.0509349,528.0000023,529.0000023,530.0000023,531.0000023,532.0509349,533.0000023,534.0000023,535.0509349,536.0000023,537.0000023,538.0000023,539.0509349,540.0000023,541.0000023,542.0509349,543.0000023,544.0000023,545.0509349,546.5300167,546.0000023,547.0000023,548.0509349,549.0000023,550.5300167,550.0509349,551.0000023,552.0000023,553.5300167,553.0000023,554.0000023,555.5300167,555.0509349,556.5300167,556.0000023,557.5300167,557.0509349,558.5300167,558.0000023,559.5300167,559.5300167,559.5300167,559.0509349,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,560.5300167,562.0038484,559.5300167,559.5300167,561.0038484,558.5300167,560.0038484,557.5300167,559.0038484,559.4234239,555.5300167,557.0038484,557.4234239,555.0038484,555.4234239,553.0038484,553.4234239,551.0038484,551.4234239,550.4234239,548.4234239,549.0048088,544.0038484,546.0048088,542.4234239,543.0048088,539.4234239,537.4234239,538.0048088,536.0048088,534.0048088,532.0048088,530.0048088,528.0048088,528.2403681,524.0048088,522.0048088,520.0048088,520.2403681,516.0048088,514.0048088,514.2403681,510.0048088,508.0048088,508.2403681,503.0048088,503.2403681,499.0048088,499.2403681,494.0048088,494.2403681,490.0048088,490.2403681,487.2403681,483.0048088,483.2403681,480.2403681,476.0048088,476.2403681,473.2403681,469.0048088,469.2403681,466.2403681,462.0048088,462.2403681,459.2403681,457.2403681,453.7118669,452.2403681,450.2403681,446.7118669,445.2403681,443.2403681,441.2403681,436.0048088,436.2403681,434.2403681,430.7118669,429.2403681,427.2403681,423.0048088,423.2403681,419.0048088,419.2403681,416.2403681,412.0048088,412.2403681,408.0048088,408.2403681,404.0048088,404.2403681,400.0048088,398.0048088,398.2403681,392.4234239,393.0048088,393.2403681,389.0048088,385.4234239,386.0048088,384.0048088,380.4234239,381.0048088,379.0048088,375.4234239,376.0048088,372.4234239,371.4234239,372.0048088,368.4234239,366.0038484,366.4234239,367.0048088,362.0038484,362.4234239,360.0038484,360.4234239,358.0038484,355.5300167,358.4234239,356.0038484,355.0038484,352.5300167,354.0038484,351.5300167,353.0038484,350.5300167,352.0038484,349.5300167,349.5300167,350.4678681,348.5300167,348.5300167,348.5300167,350.0038484,347.5300167,347.5300167,347.5300167,347.5300167,349.0038484,346.5300167,346.5300167,346.5300167,346.5300167,346.5300167,346.5300167,348.0038484,345.5300167,345.5300167,345.5300167,347.0038484,344.5300167,344.5300167,346.0038484,343.5300167,345.0038484,342.5300167,345.4234239,341.5300167,344.4234239,343.4234239,339.5300167)
track_horizon = np.array([*zip(main_track_x, main_track_y)])
line = geom.LineString(track_horizon)

def dist(x1, y1, x2, y2):
    return math.sqrt((x2-x1)**2 + (y2-y1)**2)

def calc_max_point_horizon(currx, curry, currdx, currdy, currd2x, currd2y, ipx):
    maxx = currdx + 0.5*currd2x * time_horizon**2
    maxy = currdy + 0.5*currd2y * time_horizon**2
    max_dist = math.sqrt(maxx**2 + maxy**2) * time_horizon
    for i in range(ipx+2, ipx+len(track_horizon)):
        # print(dist(track_horizon[i%len(track_horizon)][0], track_horizon[i%len(track_horizon)][1], currx, curry), max_dist)
        if dist(track_horizon[i%len(track_horizon)][0], track_horizon[i%len(track_horizon)][1], currx, curry) > max_dist:
            return i - ipx

def find_pos_index(init_px, currx, curry):
    min_dist = np.inf
    min_idx = 999999
    for i in range(init_px, init_px + 400):
        idx = i % len(main_track_x)
        d = dist(main_track_x[idx], main_track_y[idx], currx, curry)
        if d < min_dist:
            min_dist = d
            min_idx = i
    return min_idx


@lru_cache(maxsize=None)
def comb(n,r):
    f = math.factorial
    return f(n) // f(r) // f(n-r)

def trajectory(c, tau):
    return reduce(lambda x,y: x+y,
                  map(lambda i: c[i] * comb(bezier_order, i) * ((1-tau/time_horizon)**(bezier_order-i)) * (tau/time_horizon)**i,
                      range(0, bezier_order+1)))

def speed(c, tau):
    return bezier_order/time_horizon * \
           reduce(lambda x, y: x + y,
                  map(lambda i: (c[i+1] - c[i]) * comb(bezier_order - 1, i) * ((1 - tau/time_horizon) ** (bezier_order - 1 - i)) * (tau/time_horizon) ** i,
                      range(0, bezier_order)))

    # return 5 * (((c[1] - c[0]) * (1 - (tau/time_horizon)) ** 4) + (4 * (c[2] - c[1]) * ((1 - (tau/time_horizon)) ** 3) * (tau/time_horizon))
    #             + (6 * (c[3] - c[2]) * (1 - (tau/time_horizon))**2 * ((tau/time_horizon) ** 2)) + (4*(c[4] - c[3]) * (1-(tau/time_horizon))* ((tau/time_horizon) ** 3))
    #             + ((c[5] - c[4]) * (tau/time_horizon)**4)) / time_horizon

def acceleration(c, tau):
    return (bezier_order*(bezier_order-1)) / time_horizon**2 * \
           reduce(lambda x, y: x + y,
                  map(lambda i: (c[i+2] - 2*c[i+1] + c[i]) * comb(bezier_order - 2, i) * ((1 - tau/time_horizon) ** (bezier_order - 2 - i)) * (tau/time_horizon) ** i,
                      range(0, bezier_order-1)))

    # return (20) * (((c[2] - 2 * c[1] + c[0]) * (1 - (tau/time_horizon)) ** 3) + (3 * ((c[3] - 2 * c[2] + c[1]) * (tau/time_horizon) * (1 - (tau/time_horizon))**2))
    #              + (3 * ((c[4] - 2 * c[3] + c[2]) * (tau/time_horizon)**2 * (1 - (tau/time_horizon)))) + (c[5] - 2 * c[4] + c[3]) * (tau/time_horizon) ** 3) /(time_horizon**2)
init_position_index = 0
@lru_cache(maxsize=500)
def distance_to_center(x, y):
    point = geom.Point(x, y)
    line = geom.LineString(circ_slice(track_horizon, init_position_index, 200))
    return point.distance(line)

def arc_length(cx, cy, delta=0.05, time_horizon=time_horizon):
    tau1 = 0
    tau2 = tau1 + delta
    d = 0.0
    while tau1 < time_horizon:
        update = dist(trajectory(cx, tau2), trajectory(cy, tau2), trajectory(cx, tau1), trajectory(cy, tau1))
        d += update
        # print(tau2, trajectory(c_x, tau2), trajectory(c_y, tau2))
        # print(tau1, trajectory(cx, tau1), trajectory(cy, tau1))
        # print("t=",tau2, "speed=", update/delta)
        # if tau2 > 0.05:
        #     print("t=",tau2, "acc=", (update/delta-old_speed)/time_delta)
        tau1 = tau2
        tau2 += delta
        old_speed = update/delta
    return d

def get_acc_bound(sp):
    if 0 <= sp < 200/3.6:
        return 21 - (sp/(200/3.6))*10
    elif 200 / 3.6 <= sp < 300 / 3.6:
        return 10 - ((sp - 200/3.6) / (100/3.6))*5
    elif 300 / 3.6 <= sp <= 360 / 3.6:
        return 5 - ((sp - 300/3.6) / (60/3.6))*5
    else:
        return 1
    # return -0.1803 * sp + 21.008

def prep_car(x, y, dx, dy, d2x, d2y, ipx):
    init_dx_dt = dx
    init_dy_dt = dy
    init_d2x_dt = d2x
    init_d2y_dt = d2y
    init_position_index = ipx
    init_x = x
    init_y = y
    c1x = (init_x + time_horizon * init_dx_dt / bezier_order)
    c1y = (init_y + time_horizon * init_dy_dt / bezier_order)
    c2x = time_horizon ** 2 * init_d2x_dt / (bezier_order*(bezier_order-1)) + 2 * (c1x) - init_x
    c2y = time_horizon ** 2 * init_d2y_dt / (bezier_order*(bezier_order-1)) + 2 * (c1y) - init_y
    c_x = [init_x, c1x, c2x]
    c_y = [init_y, c1y, c2y]
    for i in range(3, bezier_order+1):
        if i-3 < (bezier_order-3)//2:
            c_x.append(c2x)
            c_y.append(c2y)
        elif i-3 == (bezier_order-3)//2:
            c_x.append((c2x + main_track_x[init_position_index + min_point_horizon])/2)
            c_y.append((c2y + main_track_y[init_position_index + min_point_horizon])/2)
        else:
            c_x.append(main_track_x[init_position_index + min_point_horizon])
            c_y.append(main_track_y[init_position_index + min_point_horizon])
    lb = [init_x, c1x, c2x]
    for i in range(3, bezier_order+1): lb.append(0)
    lb += [init_y, c1y, c2y]
    for i in range(3, bezier_order+1): lb.append(0)
    lb.append(min_point_horizon)
    ub = [init_x, c1x, c2x]
    for i in range(3, bezier_order+1): ub.append(850)
    ub += [init_y, c1y, c2y]
    for i in range(3, bezier_order+1): ub.append(650)
    ub.append(max_point_horizon)


    c = c_x + c_y
    c.append(min_point_horizon)
    initial = np.array(c)
    return initial, ub, lb

def single_car_optimize(x, y, dx, dy, d2x, d2y, ipx, other_car_trajectories=None, other_car_ipx=None):
    global init_position_index
    init_dx_dt = dx
    init_dy_dt = dy
    init_d2x_dt = d2x
    init_d2y_dt = d2y
    init_position_index = ipx
    init_x = x
    init_y = y
    c1x = (init_x + time_horizon * init_dx_dt / bezier_order)
    c1y = (init_y + time_horizon * init_dy_dt / bezier_order)
    c2x = time_horizon ** 2 * init_d2x_dt / (bezier_order * (bezier_order - 1)) + 2 * (c1x) - init_x
    c2y = time_horizon ** 2 * init_d2y_dt / (bezier_order * (bezier_order - 1)) + 2 * (c1y) - init_y
    c_x = [init_x, c1x, c2x]
    c_y = [init_y, c1y, c2y]
    for i in range(3, bezier_order + 1):
        if i - 3 < (bezier_order - 3) // 2:
            c_x.append(c2x)
            c_y.append(c2y)
        elif i - 3 == (bezier_order - 3) // 2:
            c_x.append((c2x + main_track_x[init_position_index + min_point_horizon]) / 2)
            c_y.append((c2y + main_track_y[init_position_index + min_point_horizon]) / 2)
        else:
            c_x.append(main_track_x[init_position_index + min_point_horizon])
            c_y.append(main_track_y[init_position_index + min_point_horizon])
    lb = [init_x, c1x, c2x]
    for i in range(3, bezier_order + 1): lb.append(0)
    lb += [init_y, c1y, c2y]
    for i in range(3, bezier_order + 1): lb.append(0)
    lb.append(min_point_horizon)
    ub = [init_x, c1x, c2x]
    for i in range(3, bezier_order + 1): ub.append(850)
    ub += [init_y, c1y, c2y]
    for i in range(3, bezier_order + 1): ub.append(650)
    ub.append(max_point_horizon)

    c = c_x + c_y
    c.append(min_point_horizon)
    initial = np.array(c)

    def opt(c):
        total = 0
        t = 0
        while t <= time_horizon + plan_time_delta / 2:
            if t > time_horizon - plan_time_delta / 2: t = time_horizon
            x_p = speed(c[:len(c_x)], t)
            x_pp = acceleration(c[:len(c_x)], t)
            y_p = speed(c[len(c_x):len(c_x) + len(c_y)], t)
            y_pp = acceleration(c[len(c_x):len(c_x) + len(c_y)], t)
            sp = math.sqrt(x_p ** 2 + y_p ** 2)
            ac = math.sqrt(x_pp ** 2 + y_pp ** 2)

            def con3(c):
                if sp >= 0.1 and ac >= 0.1 and ((x_p * x_pp + y_p * y_pp) >= 0.01):
                    return min(0, get_acc_bound(sp) - ac)
                else:
                    return min(0, 5 * gravitational_acceleration - ac)

            if other_car_trajectories:
                for o in other_car_trajectories:
                    con4 = lambda c: dist(trajectory(c[:len(c_x)], t), trajectory(c[len(c_x):len(c_x) + len(c_y)], t),
                                         trajectory(o[:len(c_x)], t), trajectory(o[len(c_x):len(c_x) + len(c_y)], t))
                    total -= (20/len(other_car_trajectories)) * min(0, con4(c) - (car_width/2 + .5))

            # con2 = lambda c: find_pos_index(init_position_index, round(trajectory(c[:len(c_x)], t)),
            #                                 round(trajectory(c[len(c_x):len(c_x) + len(c_y)], t))) \
            #                  - find_pos_index(init_position_index, round(trajectory(c[:len(c_x)], t - plan_time_delta)),
            #                                   round(trajectory(c[len(c_x):len(c_x) + len(c_y)], t - plan_time_delta)))
            # total -= 30 * (con2(c) - 6)
            total -= 2 * con3(c)
            # total -= .5*ac/time_delta
            total -= .2 * sp
            total += 1 * distance_to_center(trajectory(c[:len(c_x)], t), trajectory(c[len(c_x):len(c_x) + len(c_y)], t))
            # total -= find_pos_index(init_position_index, round(trajectory(c[:len(c_x)], t)), round(trajectory(c[len(c_x):len(c_x)+len(c_y)], t))) - init_position_index
            t += plan_time_delta
        # total -= 2 * (find_pos_index(init_position_index, c[len(c_x) - 1],c[len(c_x) + len(c_y) - 1]) - init_position_index)
        if other_car_trajectories:
            for o, ipx2 in zip(other_car_trajectories, other_car_ipx):
                total -= (30/len(other_car_trajectories)) * (find_pos_index(ipx, trajectory(c[:len(c_x)], time_horizon),
                                              trajectory(c[len(c_x):len(c_x) + len(c_y)], time_horizon)) -
                               find_pos_index(ipx2, trajectory(o[:len(c_x)], time_horizon),
                                              trajectory(o[len(c_x):len(c_x) + len(c_y)], time_horizon)))
        # total -= 5 * (find_pos_index(init_position_index, trajectory(c[:len(c_x)], time_horizon),
        #                              trajectory(c[len(c_x):len(c_x) + len(c_y)], time_horizon)) - init_position_index)
        # total -= 0.5*arc_length(c[:len(c_x)], c[len(c_x):len(c_x)+len(c_y)])
        return total

    constraints = []

    # Speed Constraints
    t = 0
    while t <= time_horizon + plan_time_delta / 2:
        if t > time_horizon - plan_time_delta / 2: t = time_horizon
        # con = lambda c:  math.sqrt(speed(c[:len(c_x)], t)**2 + speed(c[len(c_x):len(c_x)+len(c_y)], t)**2) - math.sqrt(coefficient_of_friction * gravitational_acceleration * radius(c[:len(c_x)], c[len(c_x):len(c_x)+len(c_y)], t))
        # nlc = NonlinearConstraint(con, -np.inf, 0)
        con = lambda c: speed(c[:len(c_x)], t) ** 2 + speed(c[len(c_x):len(c_x) + len(c_y)], t) ** 2
        nlc = NonlinearConstraint(con, min_vel**2, max_vel ** 2)
        constraints.append(nlc)

        t += plan_time_delta

    t = plan_time_delta
    while t <= time_horizon + plan_time_delta / 2:
        if t > time_horizon - plan_time_delta / 2: t = time_horizon
        con = lambda c: find_pos_index(init_position_index, round(trajectory(c[:len(c_x)], t)),
                                       round(trajectory(c[len(c_x):len(c_x) + len(c_y)], t))) \
                        - find_pos_index(init_position_index, round(trajectory(c[:len(c_x)], t - plan_time_delta)),
                                         round(trajectory(c[len(c_x):len(c_x) + len(c_y)], t - plan_time_delta)))
        nlc = NonlinearConstraint(con, 2, max_vel)
        constraints.append(nlc)
        t += plan_time_delta

    # # Acceleration Constraints
    # t = 0
    # while t <= time_horizon+plan_time_delta/2:
    #     if t > time_horizon-plan_time_delta/2: t = time_horizon
    #     def con(c):
    #         x_p = speed(c[:len(c_x)], t)
    #         x_pp = acceleration(c[:len(c_x)], t)
    #         y_p = speed(c[len(c_x):len(c_x) + len(c_y)], t)
    #         y_pp = acceleration(c[len(c_x):len(c_x) + len(c_y)], t)
    #         sp = math.sqrt(x_p ** 2 + y_p ** 2)
    #         ac = math.sqrt(x_pp ** 2 + y_pp ** 2)
    #         if sp >= 0.01 and ((x_p * x_pp + y_p * y_pp)/(sp*ac) <= .08):
    #             return 5*gravitational_acceleration - ac
    #         else:
    #             # if 0 <= sp <= 200/3.6: return 21 - ac
    #             # elif 200/3.6 <= sp <= 300/3.6: return 10 - ac
    #             # else: return 5 - ac
    #             return -0.1803 * sp + 21.008 - math.sqrt(x_pp ** 2 + y_pp ** 2)
    #     nlc = NonlinearConstraint(con, 0, np.inf)
    #     constraints.append(nlc)
    #     t += plan_time_delta

    # Track Bounds Constraints
    t = 0
    while t <= time_horizon + plan_time_delta / 2:
        if t > time_horizon - plan_time_delta / 2: t = time_horizon
        con = lambda c: distance_to_center(round(trajectory(c[:len(c_x)], t)),
                                           round(trajectory(c[len(c_x):len(c_x) + len(c_y)], t)))
        nlc = NonlinearConstraint(con, 0, (track_width / 2))
        constraints.append(nlc)
        if other_car_trajectories:
            for o in other_car_trajectories:
                con = lambda c: dist(trajectory(c[:len(c_x)], t), trajectory(c[len(c_x):len(c_x) + len(c_y)], t),
                                     trajectory(o[:len(c_x)], t), trajectory(o[len(c_x):len(c_x) + len(c_y)], t))
                nlc = NonlinearConstraint(con, car_width / 2 + .5, np.inf)
                constraints.append(nlc)
        t += plan_time_delta

    A = []
    for i in range(len(c_x) - 1):
        A.append([0.0] * len(c))
        A[-1][i] = -1.0
        A[-1][i + 1] = 1.0
    for i in range(len(c_x), len(c_x) + len(c_y) - 1):
        A.append([0.0] * len(c))
        A[-1][i] = -1.0
        A[-1][i + 1] = 1.0
    # print(A)
    lc = LinearConstraint(A, -(max_vel * time_horizon) / bezier_order, (max_vel * time_horizon) / bezier_order)
    constraints.append(lc)

    for i in range(len(c_x) - 2):
        A.append([0.0] * len(c))
        A[-1][i] = 1.0
        A[-1][i + 1] = -2.0
        A[-1][i + 2] = 1.0
    for i in range(len(c_x), len(c_x) + len(c_y) - 2):
        A.append([0.0] * len(c))
        A[-1][i] = 1.0
        A[-1][i + 1] = -2.0
        A[-1][i + 2] = 1.0
    # print(A)
    lc = LinearConstraint(A, -(5 * gravitational_acceleration * time_horizon * time_horizon) / (
                bezier_order * (bezier_order - 1)),
                          (5 * gravitational_acceleration * time_horizon * time_horizon) / (
                                      bezier_order * (bezier_order - 1)))
    constraints.append(lc)

    t = 0
    while t <= time_horizon + plan_time_delta / 2:
        if t > time_horizon - plan_time_delta / 2: t = time_horizon

        def con(c):
            x_p = speed(c[:len(c_x)], t)
            x_pp = acceleration(c[:len(c_x)], t)
            y_p = speed(c[len(c_x):len(c_x) + len(c_y)], t)
            y_pp = acceleration(c[len(c_x):len(c_x) + len(c_y)], t)
            sp = (x_p ** 2 + y_p ** 2)
            return math.atan(((x_p * y_pp - y_p * x_pp) / (sp ** 1.5)) * car_length) * 180 / math.pi

        nlc = NonlinearConstraint(con, -30, 30)
        constraints.append(nlc)
        t += plan_time_delta

    con = lambda c: find_pos_index(init_position_index, c[len(c_x)-1], c[len(c_x)+len(c_y)-1]) - init_position_index
    nlc = NonlinearConstraint(con, min_point_horizon, max_point_horizon)
    constraints.append(nlc)
    print("Initial x speed", speed(initial[:len(c_x)], 0), "Initial y speed",
          speed(initial[len(c_x):len(c_x) + len(c_y)], 0),
          "Initial x acc", acceleration(initial[:len(c_x)], 0), "Initial y acc",
          acceleration(initial[len(c_x):len(c_x) + len(c_y)], 0))
    print("init control x=", c_x)
    print("init control y=", c_y)
    print("init lb=", lb)
    print("init ub=", ub)
    bounds = Bounds(lb, ub)
    print(datetime.datetime.now())
    # result = minimize(opt, initial, bounds=bounds, constraints=constraints, options={'disp': True, 'maxiter':2500})
    result = basinhopping(opt, initial, niter=3, minimizer_kwargs={'bounds': bounds, 'constraints': constraints, 'options': {'maxiter': 50}})
    print(datetime.datetime.now())
    output = [round(x, 3) for x in result.x]


    print("c_x", output[:len(c_x)])
    print("c_y", output[len(c_x):len(c_x) + len(c_y)])
    print("N", output[-1])
    print("trajectory distance:",
          arc_length(output[:len(c_x)], output[len(c_x):len(c_x) + len(c_y)], time_horizon=time_horizon))

    t = 0
    while t <= time_horizon + verify_time_delta / 2:
        if t > time_horizon - verify_time_delta / 2: t = time_horizon
        if other_car_trajectories:
            for o in other_car_trajectories:
                con = lambda c: dist(trajectory(c[:len(c_x)], t), trajectory(c[len(c_x):len(c_x) + len(c_y)], t),
                                     trajectory(o[:len(c_x)], t), trajectory(o[len(c_x):len(c_x) + len(c_y)], t))
                
                print("time=", t, "Dist to other car=", con(output))
        t += verify_time_delta
    total_c3_val = 0

    t = 0
    while t <= time_horizon + verify_time_delta / 2:
        if t > time_horizon - verify_time_delta / 2: t = time_horizon

        def con3(c):
            x_p = speed(c[:len(c_x)], t)
            x_pp = acceleration(c[:len(c_x)], t)
            y_p = speed(c[len(c_x):len(c_x) + len(c_y)], t)
            y_pp = acceleration(c[len(c_x):len(c_x) + len(c_y)], t)
            sp = math.sqrt(x_p ** 2 + y_p ** 2)
            ac = math.sqrt(x_pp ** 2 + y_pp ** 2)
            if sp >= 0.1 and ac >= 0.1 and ((x_p * x_pp + y_p * y_pp) / (sp * ac) <= .01):
                return 5 * gravitational_acceleration - ac
            else:
                return get_acc_bound(sp) - ac

        x_p = speed(output[:len(c_x)], t)
        x_pp = acceleration(output[:len(c_x)], t)
        y_p = speed(output[len(c_x):len(c_x) + len(c_y)], t)
        y_pp = acceleration(output[len(c_x):len(c_x) + len(c_y)], t)
        sp = math.sqrt(x_p ** 2 + y_p ** 2)
        ac = math.sqrt(x_pp ** 2 + y_pp ** 2)
        # print("time=", t, "speed=", sp, "sp_x=", speed(output[:len(c_x)], t), "sp_y=", speed(output[len(c_x):len(c_x)+len(c_y)], t))
        # if sp >= 0.01 and ac >=0.01 and ((x_p * x_pp + y_p * y_pp)/(sp*ac) <= .08):
        #     print("time=", t, "acc_bound=", 5*gravitational_acceleration, "braking/turning_acc=", ac,"constraint3_val=", con3(output), "acc_x=", acceleration(output[:len(c_x)], t), "acc_y=", acceleration(output[len(c_x):len(c_x)+len(c_y)], t))
        # else:
        #     print("time=", t, "acc_bound=", get_acc_bound(sp), "acc=", ac ,"constraint3_val=", con3(output), "acc_x=", acceleration(output[:len(c_x)], t), "acc_y=", acceleration(output[len(c_x):len(c_x)+len(c_y)], t))
        total_c3_val -= (min(0, con3(output)))
        t += verify_time_delta
        return output

def two_car_optimize(x1, y1, dx1, dy1, d2x1, d2y1, ipx1, x2, y2, dx2, dy2, d2x2, d2y2, ipx2):
    print("OPPONENT CAR")
    opponent_best = single_car_optimize(x2, y2, dx2, dy2, d2x2, d2y2, ipx2)

    print("OUR CAR GIVEN OPPONENT CAR")
    our_best = single_car_optimize(x1, y1, dx1, dy1, d2x1, d2y1, ipx1, other_car_trajectories=[opponent_best], other_car_ipx=[ipx2])

    print("OPPONENT CAR GIVEN OUR CAR")
    opponent_best = single_car_optimize(x2, y2, dx2, dy2, d2x2, d2y2, ipx2, other_car_trajectories=[our_best], other_car_ipx=[ipx1])

    print("OUR CAR GIVEN OPPONENT CAR")
    our_best = single_car_optimize(x1, y1, dx1, dy1, d2x1, d2y1, ipx1, other_car_trajectories=[opponent_best], other_car_ipx=[ipx2])

    # print("OPPONENT CAR GIVEN OUR CAR")
    # opponent_best = single_car_optimize(x2, y2, dx2, dy2, d2x2, d2y2, ipx2, other_car_trajectories=[our_best], other_car_ipx=[ipx1])

    us_x = []
    us_y = []
    op_x = []
    op_y = []
    t = 0

    while t <= time_horizon + verify_time_delta / 2:
        if t > time_horizon - verify_time_delta / 2: t = time_horizon
        us_x.append(trajectory(our_best[:num_cp], t))
        us_y.append(trajectory(our_best[num_cp:num_cp*2], t))
        op_x.append(trajectory(opponent_best[:num_cp], t))
        op_y.append(trajectory(opponent_best[num_cp:num_cp*2], t))
        t += verify_time_delta

    plt.plot(track_boundary1_x, track_boundary1_y, '.k-', label="Track Boundary Right")
    plt.plot(track_boundary2_x, track_boundary2_y, '.k-', label="Track Boundary Left")
    plt.plot(main_track_x, main_track_y, '.g-', label="Center Trajectory")
    plt.plot(us_x, us_y, '.b-')
    plt.plot(op_x, op_y, '.r-')
    plt.show()

ipx1 = 1
car1_x = 82
car1_y = 350
car1_dx = 0
car1_dy = 0
car1_d2x = -6
car1_d2y = 0


ipx2 = 0
car2_x = 79
car2_y = 350
car2_dx = 0
car2_dy = 0
car2_d2x = -2
car2_d2y = 0
min_point_horizon = int(min(min_point_horizon, 0.5*(time_horizon**2)*min(math.sqrt(car1_d2x**2 + car1_d2y**2), math.sqrt(car2_d2x**2 + car2_d2y**2))))

print("min_pt_hz", min_point_horizon, "max_pt_hz", max_point_horizon)
two_car_optimize(car1_x, car1_y, car1_dx, car1_dy, car1_d2x, car1_d2y, ipx1,
                 car2_x, car2_y, car2_dx, car2_dy, car2_d2x, car2_d2y, ipx2)
